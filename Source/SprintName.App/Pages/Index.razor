@using System.Reflection
@using System.IO
@using Humanizer

@page "/"


<div class="d-flex flex-column align-items-center justify-content-center h-100">
    @if (string.IsNullOrEmpty(_name))
    {
        <div class="spinner-border text-secondary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <h1 class="h4 text-secondary user-select-none">Sprint Name</h1>
        <b class="h1 text-white text-center my-5">

            @_name
        </b>
        <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="@Generate">
            <span class="fa fa-sync me-3"></span><b>Generate</b>
        </button>
    }
</div>

@inject HttpClient Http

@code
{
    private string[] _adjectives;
    private string[] _animals;
    private string _name;

    protected override async Task OnInitializedAsync()
    {
        _adjectives = await LoadWords("adjectives.txt");
        _animals = await LoadWords("animals.txt");

        Generate();
    }

    private void Generate()
    {
        _name = $"{GetAdjective()} {GetAnimal()}".Titleize();
    }

    private string GetAdjective()
    {
        var random = new Random();
        return _adjectives[random.Next(0, _adjectives.Length)];
    }

    private string GetAnimal()
    {
        var random = new Random();
        return _animals[random.Next(0, _animals.Length)];
    }

    private async Task<string[]> LoadWords(string filename)
    {
        var list = await Http.GetStringAsync($"word-lists/{filename}");
        return list.Split(Environment.NewLine).ToArray();
    }
}
